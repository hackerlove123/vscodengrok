const { exec, spawn } = require("child_process");
const axios = require("axios");

const BOT_TOKEN = "7828296793:AAEw4A7NI8tVrdrcR0TQZXyOpNSPbJmbGUU";
const CHAT_ID = "7371969470";
const NGROK_AUTH_TOKEN = "2tEd9VIVsq4yjGzeuELkR33Uw12_7QvuNGXyPCb9Bty6r4jdK";

const sendTelegramMessage = async (message) => {
    try {
        await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, { chat_id: CHAT_ID, text: message });
        console.log("‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
    }
};

const waitForCodeServer = async () => {
    await sendTelegramMessage("üîÑ ƒêang ki·ªÉm tra code-server...");
    return new Promise((resolve, reject) => {
        const checkServer = setInterval(() => exec("curl -s http://localhost:8080", (error) => {
            if (!error) {
                clearInterval(checkServer);
                resolve();
            }
        }), 1000);
        setTimeout(() => {
            clearInterval(checkServer);
            reject(new Error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn code-server sau 30 gi√¢y."));
        }, 30000);
    });
};

const getNgrokTunnelUrl = async () => {
    try {
        const { data: { tunnels } } = await axios.get("http://127.0.0.1:4040/api/tunnels");
        return tunnels[0]?.public_url || Promise.reject(new Error("‚ùå Kh√¥ng t√¨m th·∫•y tunnel n√†o."));
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y URL t·ª´ Ngrok API:", error);
        throw error;
    }
};

const startNgrokTunnel = async (port) => {
    await sendTelegramMessage("üîÑ ƒêang th√™m authtoken cho Ngrok...");
    exec(`ngrok config add-authtoken ${NGROK_AUTH_TOKEN}`, async (error) => {
        if (error) return await sendTelegramMessage("‚ùå L·ªói khi th√™m authtoken cho Ngrok.");
        await sendTelegramMessage("‚úÖ Authtoken ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
        const ngrokProcess = spawn("ngrok", ["http", port]);
        setTimeout(async () => {
            try {
                const tunnelUrl = await getNgrokTunnelUrl();
                const fullUrl = `${tunnelUrl}/?folder=/NeganServer`;
                await sendTelegramMessage(`üåê Server-Terminal ƒëang ch·∫°y Public URL üëâ:\n${fullUrl}\nüëâ Truy c·∫≠p URL Sau ƒê√≥ B·∫•m [Visit](${fullUrl}) ƒê·ªÉ truy c·∫≠p Server.`);
            } catch (error) {
                await sendTelegramMessage("‚ùå Kh√¥ng th·ªÉ l·∫•y URL c·ªßa Ngrok Tunnel.");
            }
        }, 5000);
        ngrokProcess.stderr.on("data", (data) => console.error(`[ngrok] ${data.toString()}`));
        ngrokProcess.on("close", (code) => sendTelegramMessage(`üî¥ Ngrok ƒë√£ ƒë√≥ng v·ªõi m√£ ${code}`));
    });
};

const startCodeServer = async () => {
    await sendTelegramMessage("üîÑ ƒêang kh·ªüi ch·∫°y code-server...");
    const codeServerProcess = spawn("code-server", ["--bind-addr", "0.0.0.0:8080", "--auth", "none"]);
    codeServerProcess.stderr.on("data", (data) => console.error(`[code-server] ${data.toString()}`));
    codeServerProcess.stdout.on("data", (data) => console.log(`[code-server] ${data.toString()}`));
    await waitForCodeServer();
    await sendTelegramMessage("‚úÖ code-server ƒë√£ s·∫µn s√†ng!");
};

const main = async () => {
    try {
        await startCodeServer();
        await startNgrokTunnel(8080);
    } catch (error) {
        await sendTelegramMessage(`‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y: ${error.message}`);
    }
};

main();
