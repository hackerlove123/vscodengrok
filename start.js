const { exec, spawn } = require("child_process");
const axios = require("axios");

// C·∫•u h√¨nh
const BOT_TOKEN = "7828296793:AAEw4A7NI8tVrdrcR0TQZXyOpNSPbJmbGUU";
const CHAT_ID = "7371969470";
const NGROK_AUTH_TOKEN = "2tEd9VIVsq4yjGzeuELkR33Uw12_7QvuNGXyPCb9Bty6r4jdK";

// H√†m g·ª≠i tin nh·∫Øn qua Telegram
const sendTelegramMessage = async (message) => {
    try {
        await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            chat_id: CHAT_ID,
            text: message,
        });
        console.log("‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
    }
};

// H√†m ki·ªÉm tra xem code-server ƒë√£ s·∫µn s√†ng ch∆∞a
const waitForCodeServer = async () => {
    await sendTelegramMessage("üîÑ ƒêang ki·ªÉm tra code-server...");
    return new Promise((resolve, reject) => {
        const checkServer = setInterval(() => {
            exec("curl -s http://localhost:8080", (error) => {
                if (!error) {
                    clearInterval(checkServer);
                    resolve();
                }
            });
        }, 1000);

        // Timeout sau 30 gi√¢y
        setTimeout(() => {
            clearInterval(checkServer);
            reject(new Error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn code-server sau 30 gi√¢y."));
        }, 30000);
    });
};

// H√†m l·∫•y URL c·ªßa Ngrok Tunnel t·ª´ API
const getNgrokTunnelUrl = async () => {
    try {
        const response = await axios.get("http://127.0.0.1:4040/api/tunnels");
        const tunnels = response.data.tunnels;

        if (tunnels.length > 0) {
            return tunnels[0].public_url;
        } else {
            throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y tunnel n√†o.");
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y URL t·ª´ Ngrok API:", error);
        throw error;
    }
};

// H√†m kh·ªüi ch·∫°y Ngrok Tunnel
const startNgrokTunnel = async (port) => {
    await sendTelegramMessage("üîÑ ƒêang th√™m authtoken cho Ngrok...");

    // Th√™m authtoken cho Ngrok
    exec(`ngrok config add-authtoken ${NGROK_AUTH_TOKEN}`, async (error) => {
        if (error) {
            await sendTelegramMessage("‚ùå L·ªói khi th√™m authtoken cho Ngrok.");
            throw error;
        }

        await sendTelegramMessage("‚úÖ Authtoken ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");

        // Kh·ªüi ch·∫°y Ngrok Tunnel
        const ngrokProcess = spawn("ngrok", ["http", port]);

        // ƒê·ª£i 5 gi√¢y ƒë·ªÉ Ngrok kh·ªüi ƒë·ªông ho√†n to√†n
        setTimeout(async () => {
            try {
                const tunnelUrl = await getNgrokTunnelUrl();
                await sendTelegramMessage(`üåê Ngrok Tunnel ƒëang ch·∫°y:\n${tunnelUrl}`);
            } catch (error) {
                await sendTelegramMessage("‚ùå Kh√¥ng th·ªÉ l·∫•y URL c·ªßa Ngrok Tunnel.");
            }
        }, 5000);

        ngrokProcess.stderr.on("data", (data) => {
            console.error(`[ngrok] ${data.toString()}`);
        });

        ngrokProcess.on("close", (code) => {
            sendTelegramMessage(`üî¥ Ngrok ƒë√£ ƒë√≥ng v·ªõi m√£ ${code}`);
        });
    });
};

// H√†m kh·ªüi ch·∫°y code-server
const startCodeServer = async () => {
    await sendTelegramMessage("üîÑ ƒêang kh·ªüi ch·∫°y code-server...");

    const codeServerProcess = exec("code-server --bind-addr 0.0.0.0:8080 --auth none");

    // B·ªè qua c√°c l·ªói t·ª´ code-server
    codeServerProcess.stderr.on("data", () => {});

    // ƒê·ª£i code-server kh·ªüi ƒë·ªông th√†nh c√¥ng
    await waitForCodeServer();
    await sendTelegramMessage("‚úÖ code-server ƒë√£ s·∫µn s√†ng!");
};

// H√†m ch√≠nh
const main = async () => {
    try {
        await startCodeServer();
        await startNgrokTunnel(8080);
    } catch (error) {
        await sendTelegramMessage(`‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y: ${error.message}`);
    }
};

// Kh·ªüi ch·∫°y
main();
