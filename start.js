const { exec, spawn } = require("child_process");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

// C·∫•u h√¨nh
const BOT_TOKEN = "7828296793:AAEw4A7NI8tVrdrcR0TQZXyOpNSPbJmbGUU";
const CHAT_ID = "7371969470";
const NGROK_AUTH_TOKEN = "2tEd9VIVsq4yjGzeuELkR33Uw12_7QvuNGXyPCb9Bty6r4jdK";
const PASSWORD = "admin"; // M·∫≠t kh·∫©u truy c·∫≠p code-server

// H√†m g·ª≠i tin nh·∫Øn qua Telegram
const sendTelegramMessage = async (message) => {
    try {
        await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, { chat_id: CHAT_ID, text: message });
        console.log("‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
    }
};

// H√†m t·∫°o th∆∞ m·ª•c l√†m vi·ªác ng·∫´u nhi√™n
const createRandomWorkspace = () => {
    const randomFolderName = `workspace_${Math.random().toString(36).substring(7)}`;
    const workspacePath = path.join(__dirname, randomFolderName);
    if (!fs.existsSync(workspacePath)) fs.mkdirSync(workspacePath);
    return workspacePath;
};

// H√†m ki·ªÉm tra code-server
const waitForCodeServer = async () => {
    await sendTelegramMessage("üîÑ ƒêang ki·ªÉm tra code-server...");
    return new Promise((resolve, reject) => {
        const checkServer = setInterval(() => exec("curl -s http://localhost:8080", (error) => !error && (clearInterval(checkServer), resolve())), 1000);
        setTimeout(() => (clearInterval(checkServer), reject(new Error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn code-server sau 30 gi√¢y."))), 30000);
    });
};

// H√†m l·∫•y URL c·ªßa Ngrok Tunnel t·ª´ API
const getNgrokTunnelUrl = async () => {
    try {
        const { data: { tunnels } } = await axios.get("http://127.0.0.1:4040/api/tunnels");
        return tunnels[0]?.public_url || Promise.reject(new Error("‚ùå Kh√¥ng t√¨m th·∫•y tunnel n√†o."));
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y URL t·ª´ Ngrok API:", error);
        throw error;
    }
};

// H√†m kh·ªüi ch·∫°y Ngrok Tunnel
const startNgrokTunnel = async (port) => {
    await sendTelegramMessage("üîÑ ƒêang th√™m authtoken cho Ngrok...");
    exec(`ngrok config add-authtoken ${NGROK_AUTH_TOKEN}`, async (error) => {
        if (error) return await sendTelegramMessage("‚ùå L·ªói khi th√™m authtoken cho Ngrok.");
        await sendTelegramMessage("‚úÖ Authtoken ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
        const ngrokProcess = spawn("ngrok", ["http", port]);
        setTimeout(async () => {
            try {
                const tunnelUrl = await getNgrokTunnelUrl();
                await sendTelegramMessage(`üåê Ngrok Tunnel ƒëang ch·∫°y:\n${tunnelUrl}\nüîê M·∫≠t kh·∫©u: ${PASSWORD}`);
            } catch (error) {
                await sendTelegramMessage("‚ùå Kh√¥ng th·ªÉ l·∫•y URL c·ªßa Ngrok Tunnel.");
            }
        }, 5000);
        ngrokProcess.stderr.on("data", (data) => console.error(`[ngrok] ${data.toString()}`));
        ngrokProcess.on("close", (code) => sendTelegramMessage(`üî¥ Ngrok ƒë√£ ƒë√≥ng v·ªõi m√£ ${code}`));
    });
};

// H√†m kh·ªüi ch·∫°y code-server
const startCodeServer = async () => {
    await sendTelegramMessage("üîÑ ƒêang kh·ªüi ch·∫°y code-server...");
    const workspacePath = createRandomWorkspace();
    const codeServerProcess = exec(`code-server --bind-addr 0.0.0.0:8080 --auth password --password ${PASSWORD} ${workspacePath}`);
    codeServerProcess.stderr.on("data", () => {});
    await waitForCodeServer();
    await sendTelegramMessage(`‚úÖ code-server ƒë√£ s·∫µn s√†ng!\nüìÇ Th∆∞ m·ª•c l√†m vi·ªác: ${workspacePath}`);
};

// H√†m ch√≠nh
const main = async () => {
    try {
        await startCodeServer();
        await startNgrokTunnel(8080);
    } catch (error) {
        await sendTelegramMessage(`‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y: ${error.message}`);
    }
};

// Kh·ªüi ch·∫°y
main();
